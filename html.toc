
(add-ns t (module "tag.toc"))
(add-ns d (module "document.toc"))

(deftype HTMLTag [name contents styling attributes class]
  (assert (instance? t/Classes class))
  (assert (instance? t/Styling styling))

  Stringable
  (string-list [_]
    (list "<Tag " (str name) ">"))

  d/DocElement
  (d/html [t]
    ["\n<" (.name t) " "
     (-> [(d/html (.class t))
          (d/html (.attributes t))
          (d/html (.styling t))]
         (remove empty?)
         (interpose "\n")
         vec)
     (either (and (empty? (.contents t))
                  (maybe "/>"))
             [">" (d/html (.contents t)) "\n</" (.name t) ">"])])

  (d/css [t classes]
    (d/css (.contents t) (d/css (.class t) classes))))

(defn html-tag [name]
  (fn tag-constructor
    ([]
     (HTMLTag name [] t/empty-style {} t/empty-class))
    ([attr-or-tag & contents]
     (let [contents (either (and (instance? HashMap attr-or-tag)
                                 (maybe contents))
                            (cons attr-or-tag contents))]
       (HTMLTag name (vec contents)
                t/empty-style
                (either (instance? HashMap attr-or-tag) {})
                t/empty-class)))))

(def head (html-tag "head"))
(def body (html-tag "body"))
(def style (html-tag "style"))
(def script (html-tag "script"))
(def a (html-tag "a"))
(def div (html-tag "div"))
(def p (html-tag "p"))
(def span (html-tag "span"))
(def article (html-tag "article"))
(def aside (html-tag "aside"))
(def details (html-tag "details"))
(def footer (html-tag "footer"))
(def header (html-tag "header"))
(def hgroup (html-tag "hgroup"))
(def menu (html-tag "menu"))
(def nav (html-tag "nav"))
(def section (html-tag "section"))
(def option (html-tag "option"))
(def ol (html-tag "ol"))
(def ul (html-tag "ul"))
(def li (html-tag "li"))
(def link (html-tag "link"))
(def title (html-tag "title"))
(def meta (html-tag "meta"))
(def img (html-tag "img"))
(def image (html-tag "image"))
(def h1 (html-tag "h1"))
(def h2 (html-tag "h2"))
(def h3 (html-tag "h3"))
(def h4 (html-tag "h4"))
(def h5 (html-tag "h5"))
(def h6 (html-tag "h6"))
(def button (html-tag "button"))
(def input (html-tag "input"))
(def label (html-tag "label"))
(def form (html-tag "form"))

(def nbsp
  (reify d/DocElement
    (d/css [_ classes] classes)
    (d/html [_] ["&nbsp;"])))

(extend-type String
  t/Stylings
  (t/add-class [s class]
    (t/add-class (span s) class))

  (t/add-style [s attr-name value]
    (t/add-style (span s) attr-name value)))
