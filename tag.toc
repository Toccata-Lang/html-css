
(deftype StyleAttribute [name value])

(defprotocol Stylings
  (add-class [element class]
    (.class element (conj (.class element) class)))
  (add-style [element attr-name value]
    (.styling element (-> (.styling element)
                          (remove (fn [style]
                                    (and (instance? StyleAttribute style)
                                         (= attr-name (.name style)))))
                          (conj (StyleAttribute attr-name value))))))

(deftype Styling [styles]
  (assert (instance? Vector styles))

  Collection
  (conj [_ v]
    (assert (instance? StyleAttribute v))

    (Styling (conj styles v)))

  (filter [_ f]
    (Styling (filter styles f))))

(deftype Class [name styling]
  (assert (instance? Styling styling))

  Stringable
  (string-list [_] (list "<CSS-Class " name ">"))

  Function
  (invoke [class element]
    (add-class element class)))

(deftype Classes [classes]
  (assert (instance? HashMap classes))

  Collection
  (conj [_ v]
    (assert (instance? Class v))
    (Classes (assoc classes (.name v) v))))

(deftype Tag [name contents styling attributes class]
  (assert (instance? Classes class))
  (assert (instance? Styling styling))

  Stringable
  (string-list [_]
    (list "<Tag " (str name) ">"))

  DocElement
  (html [t]
    ["\n<" (.name t) " "
     (-> [(html (.class t))
          (html (.attributes t))
          (html (.styling t))]
         (remove empty?)
         (interpose "\n")
         vec)
     (either (and (empty? (.contents t))
                  (maybe "/>"))
             [">" (html (.contents t)) "\n</" (.name t) ">"])])

  (css [t classes]
    (css (.contents t) (css (.class t) classes))))

(def empty-class (Classes {}))
(def empty-style (Styling []))

(defn class [name]
  (Class name empty-style))

(defn attr [element attr-key value]
  (.attributes element (assoc (.attributes element)
                         attr-key value)))
