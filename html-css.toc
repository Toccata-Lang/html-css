
(defprotocol PageElement
  (html [_]
    (assert-result x (instance? Vector x)))

  (css [_ classes]
    ;; TODO: find a way to change the 'HashMap' assertion to 'Classes'
    (assert (instance? HashMap classes))
    (assert-result x (instance? HashMap x))))

(extend-type Integer
  PageElement
  (css [_ classes]
    classes)

  (html [n]
    [(str n)]))

(extend-type Symbol
  PageElement
  (css [_ classes]
    classes)

  (html [s]
    [(str s)]))

(extend-type String
  PageElement
  (css [_ classes]
    classes)

  (html [s]
    [s]))

(extend-type HashMap
  PageElement
  (html [m]
    (-> m
        seq
        (map (fn [[k v]]
               [(str k "=\"" v "\"")]))
        (interpose "\n")
        vec)))

(extend-type List
  PageElement
  (html [l]
    (reduce l [] (fn [v x]
                   (conj v (html x)))))
  (css [l classes]
    (reduce l classes (fn [classes x]
                        (css x classes)))))

(extend-type Vector
  PageElement
  (html [v]
    (map v html))
  (css [v classes]
    (reduce v classes (fn [classes x]
                        (css x classes)))))

;; values that are also types
(def row (reify PageElement (html [_] ["row"])))
(def column (reify PageElement (html [_] ["column"])))
(def cover (reify PageElement (html [_] ["cover"])))
(def flex (reify PageElement (html [_] ["flex"])))
(def flex-begin (reify PageElement (html [_] ["flex-begin"])))
(def flex-end (reify PageElement (html [_] ["flex-end"])))
(def center (reify PageElement (html [_] ["center"])))
(def space-between (reify PageElement (html [_] ["space-between"])))
(def block (reify PageElement (html [_] ["block"])))
(def fixed (reify PageElement (html [_] ["fixed"])))
(def relative (reify PageElement (html [_] ["relative"])))
(def auto (reify PageElement (html [_] ["auto"])))
(def normal (reify PageElement (html [_] ["normal"])))
(def none (reify PageElement (html [_] ["none"])))
(def disc (reify PageElement (html [_] ["disc"])))
(def circle (reify PageElement (html [_] ["circle"])))
(def square (reify PageElement (html [_] ["square"])))
(def decimal (reify PageElement (html [_] ["decimal"])))
(def lower-roman (reify PageElement (html [_] ["lower-roman"])))
(def upper-roman (reify PageElement (html [_] ["upper-roman"])))
(def lower-alpha (reify PageElement (html [_] ["lower-alpha"])))
(def lower-latin (reify PageElement (html [_] ["lower-latin"])))
(def upper-alpha (reify PageElement (html [_] ["upper-alpha"])))
(def upper-latin (reify PageElement (html [_] ["upper-latin"])))
(def solid (reify PageElement (html [_] ["solid"])))
(def hidden (reify PageElement (html [_] ["hidden"])))
(def dotted (reify PageElement (html [_] ["dotted"])))
(def dashed (reify PageElement (html [_] ["dashed"])))
(def double (reify PageElement (html [_] ["double"])))
(def groove (reify PageElement (html [_] ["groove"])))
(def ridge (reify PageElement (html [_] ["ridge"])))
(def inset (reify PageElement (html [_] ["inset"])))
(def outset (reify PageElement (html [_] ["outset"])))
(def scroll (reify PageElement (html [_] ["scroll"])))
(def outside (reify PageElement (html [_] ["outside"])))
(def inside (reify PageElement (html [_] ["inside"])))
(def initial (reify PageElement (html [_] ["initial"])))
(def inherit (reify PageElement (html [_] ["inherit"])))
(def unset (reify PageElement (html [_] ["unset"])))
(def content-box (reify PageElement (html [_] ["content-box"])))
(def border-box (reify PageElement (html [_] ["border-box"])))
(def list-item (reify PageElement (html [_] ["list-item"])))

(def nbsp (reify PageElement
            (css [_ classes] classes)
            (html [_] ["&nbsp;"])))

(deftype StyleAttribute [name value]
  PageElement
  (html [_]
    [name ": " (vec (interpose (html value) " "))]))

(deftype Styling [styles]
  (assert (instance? Vector styles))

  Collection
  (conj [_ v]
    (assert (instance? StyleAttribute v))

    (Styling (conj styles v)))

  (filter [_ f]
    (Styling (filter styles f)))

  PageElement
  (html [_]
    (either (empty? styles)
            (comp ["style=\""]
                  (-> styles
                      (reduce [] (fn [v styling]
                                   (conj v (html styling))))
                      (interpose ";\n")
                      vec
                      (conj "\""))))))

(def empty-style (Styling []))

(deftype Class [name styling]
  (assert (instance? Styling styling))

  Stringable
  (string-list [_] (list "<CSS-Class " name ">"))

  PageElement
  (html [_]
    (either (empty? (.styles styling))
            [name "{\n"
             (-> styling
                 .styles
                 (map html)
                 (interpose ";\n")
                 vec)
             "}\n\n"]))

  (css [class classes]
    (assoc classes name class)))

(deftype Classes [classes]
  (assert (instance? HashMap classes))

  Collection
  (conj [_ v]
    (assert (instance? Class v))
    (Classes (assoc classes (.name v) v)))

  PageElement
  (html [_]
    (either (and (empty? classes)
                 (maybe []))
            (comp ["class=\""]
                  (conj (-> classes
                            keys
                            (interpose " ")
                            vec)
                        "\""))))

  (css [_ classes-map]
    ;; TODO: make this a call to comp, maybe
    (reduce (vals classes) classes-map (fn [m class]
                                         (css class m)))))

(def empty-class (Classes {}))

(defn class [name]
  (Class name empty-style))


(deftype Tag [name contents styling attributes class]
  (assert (instance? Classes class))
  (assert (instance? Styling styling))

  Stringable
  (string-list [_]
    (list "<Tag " (str name) ">"))

  PageElement
  (html [_]
    ["\n<" name " "
     (-> [(html class)
          (html attributes)
          (html styling)]
         (remove empty?)
         (interpose "\n")
         vec)
     (either (and (empty? contents)
                  (maybe "/>"))
             [">" (html contents) "\n</" name ">"])])

  (css [_ classes]
    (css contents (css class classes))))

(defn tag [name]
  (fn tag-constructor
    ([]
     (Tag name [] empty-style {} empty-class))
    ([attr-or-tag & contents]
     (let [contents (either (and (instance? HashMap attr-or-tag)
                                 (maybe contents))
                            (cons attr-or-tag contents))]
       (Tag name (vec contents)
            empty-style
            (either (instance? HashMap attr-or-tag) {})
            empty-class)))))

(defn attr [element attr-key value]
  (assert (instance? Tag element))

  (assoc-in element [.attributes attr-key] value))


(deftype pt [size]
  (assert (instance? Integer size))

  PageElement
  (html [_] [(str size "pt")]))

(deftype px [size]
  (assert (instance? Integer size))

  PageElement
  (html [_] [(str size "px")]))

(deftype percent [size]
  (assert (instance? Integer size))

  PageElement
  (html [_] [(str size "%")]))

(def Length (comp px
                  pt
                  percent
                  ;; TODO: remove when floats work
                  String ;; So we can specify "em" lengths which are usually floats
                  ))

(deftype NamedColor [color]
  PageElement
  (html [_] [color]))

;; The named colors of CSS
(def black (NamedColor "black"))
(def silver (NamedColor "silver"))
(def gray (NamedColor "gray"))
(def white (NamedColor "white"))
(def maroon (NamedColor "maroon"))
(def red (NamedColor "red"))
(def purple (NamedColor "purple"))
(def fuchsia (NamedColor "fuchsia"))
(def green (NamedColor "green"))
(def lime (NamedColor "lime"))
(def olive (NamedColor "olive"))
(def yellow (NamedColor "yellow"))
(def navy (NamedColor "navy"))
(def blue (NamedColor "blue"))
(def teal (NamedColor "teal"))
(def aqua (NamedColor "aqua"))
(def orange (NamedColor "orange"))
(def aliceblue (NamedColor "aliceblue"))
(def antiquewhite (NamedColor "antiquewhite"))
(def aquamarine (NamedColor "aquamarine"))
(def azure (NamedColor "azure"))
(def beige (NamedColor "beige"))
(def bisque (NamedColor "bisque"))
(def blanchedalmond (NamedColor "blanchedalmond"))
(def blueviolet (NamedColor "blueviolet"))
(def brown (NamedColor "brown"))
(def burlywood (NamedColor "burlywood"))
(def cadetblue (NamedColor "cadetblue"))
(def chartreuse (NamedColor "chartreuse"))
(def chocolate (NamedColor "chocolate"))
(def coral (NamedColor "coral"))
(def cornflowerblue (NamedColor "cornflowerblue"))
(def cornsilk (NamedColor "cornsilk"))
(def crimson (NamedColor "crimson"))
(def cyan (NamedColor "cyan"))
(def darkblue (NamedColor "darkblue"))
(def darkcyan (NamedColor "darkcyan"))
(def darkgoldenrod (NamedColor "darkgoldenrod"))
(def darkgray (NamedColor "darkgray"))
(def darkgreen (NamedColor "darkgreen"))
(def darkgrey (NamedColor "darkgrey"))
(def darkkhaki (NamedColor "darkkhaki"))
(def darkmagenta (NamedColor "darkmagenta"))
(def darkolivegreen (NamedColor "darkolivegreen"))
(def darkorange (NamedColor "darkorange"))
(def darkorchid (NamedColor "darkorchid"))
(def darkred (NamedColor "darkred"))
(def darksalmon (NamedColor "darksalmon"))
(def darkseagreen (NamedColor "darkseagreen"))
(def darkslateblue (NamedColor "darkslateblue"))
(def darkslategray (NamedColor "darkslategray"))
(def darkslategrey (NamedColor "darkslategrey"))
(def darkturquoise (NamedColor "darkturquoise"))
(def darkviolet (NamedColor "darkviolet"))
(def deeppink (NamedColor "deeppink"))
(def deepskyblue (NamedColor "deepskyblue"))
(def dimgray (NamedColor "dimgray"))
(def dimgrey (NamedColor "dimgrey"))
(def dodgerblue (NamedColor "dodgerblue"))
(def firebrick (NamedColor "firebrick"))
(def floralwhite (NamedColor "floralwhite"))
(def forestgreen (NamedColor "forestgreen"))
(def gainsboro (NamedColor "gainsboro"))
(def ghostwhite (NamedColor "ghostwhite"))
(def gold (NamedColor "gold"))
(def goldenrod (NamedColor "goldenrod"))
(def greenyellow (NamedColor "greenyellow"))
(def grey (NamedColor "grey"))
(def honeydew (NamedColor "honeydew"))
(def hotpink (NamedColor "hotpink"))
(def indianred (NamedColor "indianred"))
(def indigo (NamedColor "indigo"))
(def ivory (NamedColor "ivory"))
(def khaki (NamedColor "khaki"))
(def lavender (NamedColor "lavender"))
(def lavenderblush (NamedColor "lavenderblush"))
(def lawngreen (NamedColor "lawngreen"))
(def lemonchiffon (NamedColor "lemonchiffon"))
(def lightblue (NamedColor "lightblue"))
(def lightcoral (NamedColor "lightcoral"))
(def lightcyan (NamedColor "lightcyan"))
(def lightgoldenrodyellow (NamedColor "lightgoldenrodyellow"))
(def lightgray (NamedColor "lightgray"))
(def lightgreen (NamedColor "lightgreen"))
(def lightgrey (NamedColor "lightgrey"))
(def lightpink (NamedColor "lightpink"))
(def lightsalmon (NamedColor "lightsalmon"))
(def lightseagreen (NamedColor "lightseagreen"))
(def lightskyblue (NamedColor "lightskyblue"))
(def lightslategray (NamedColor "lightslategray"))
(def lightslategrey (NamedColor "lightslategrey"))
(def lightsteelblue (NamedColor "lightsteelblue"))
(def lightyellow (NamedColor "lightyellow"))
(def limegreen (NamedColor "limegreen"))
(def linen (NamedColor "linen"))
(def magenta (NamedColor "magenta"))
(def mediumaquamarine (NamedColor "mediumaquamarine"))
(def mediumblue (NamedColor "mediumblue"))
(def mediumorchid (NamedColor "mediumorchid"))
(def mediumpurple (NamedColor "mediumpurple"))
(def mediumseagreen (NamedColor "mediumseagreen"))
(def mediumslateblue (NamedColor "mediumslateblue"))
(def mediumspringgreen (NamedColor "mediumspringgreen"))
(def mediumturquoise (NamedColor "mediumturquoise"))
(def mediumvioletred (NamedColor "mediumvioletred"))
(def midnightblue (NamedColor "midnightblue"))
(def mintcream (NamedColor "mintcream"))
(def mistyrose (NamedColor "mistyrose"))
(def moccasin (NamedColor "moccasin"))
(def navajowhite (NamedColor "navajowhite"))
(def oldlace (NamedColor "oldlace"))
(def olivedrab (NamedColor "olivedrab"))
(def orangered (NamedColor "orangered"))
(def orchid (NamedColor "orchid"))
(def palegoldenrod (NamedColor "palegoldenrod"))
(def palegreen (NamedColor "palegreen"))
(def paleturquoise (NamedColor "paleturquoise"))
(def palevioletred (NamedColor "palevioletred"))
(def papayawhip (NamedColor "papayawhip"))
(def peachpuff (NamedColor "peachpuff"))
(def peru (NamedColor "peru"))
(def pink (NamedColor "pink"))
(def plum (NamedColor "plum"))
(def powderblue (NamedColor "powderblue"))
(def rosybrown (NamedColor "rosybrown"))
(def royalblue (NamedColor "royalblue"))
(def saddlebrown (NamedColor "saddlebrown"))
(def salmon (NamedColor "salmon"))
(def sandybrown (NamedColor "sandybrown"))
(def seagreen (NamedColor "seagreen"))
(def seashell (NamedColor "seashell"))
(def sienna (NamedColor "sienna"))
(def skyblue (NamedColor "skyblue"))
(def slateblue (NamedColor "slateblue"))
(def slategray (NamedColor "slategray"))
(def slategrey (NamedColor "slategrey"))
(def snow (NamedColor "snow"))
(def springgreen (NamedColor "springgreen"))
(def steelblue (NamedColor "steelblue"))
(def tan (NamedColor "tan"))
(def thistle (NamedColor "thistle"))
(def tomato (NamedColor "tomato"))
(def turquoise (NamedColor "turquoise"))
(def violet (NamedColor "violet"))
(def wheat (NamedColor "wheat"))
(def whitesmoke (NamedColor "whitesmoke"))
(def yellowgreen (NamedColor "yellowgreen"))
(def rebeccapurple (NamedColor "rebeccapurple"))

(deftype HexColor [color]
  PageElement
  (html [_] [(str "#" color)]))

(defn hex-color [s]
  ;; TODO: validate color string to only contain hex digits
  (HexColor s))

(def Global (enum initial inherit unset))

(def ColorValue (comp HexColor
                      NamedColor
                      Global))

(defprotocol Stylings
  (add-class [element class]
    (.class element (conj (.class element) class)))
  (add-style [element attr-name value]
    (.styling element (-> (.styling element)
                          (remove (fn [style]
                                    (and (instance? StyleAttribute style)
                                         (= attr-name (.name style)))))
                          (conj (StyleAttribute attr-name value))))))

(extend-type Class
  Function
  (invoke [class element]
    (add-class element class)))

;; Some types are also style attributes
(def top (reify
           Function
           (invoke [_ element value]
             (assert (instance? Length value))
             (add-style element "top" value))

           PageElement
           (html [_] ["top"])))

(def left (reify
            Function
            (invoke [_ element value]
              (assert (instance? Length value))
              (add-style element "left" value))

            PageElement
            (html [_] ["left"])))

(def right (reify
             Function
             (invoke [_ element value]
               (assert (instance? Length value))
               (add-style element "left" value))

             PageElement
             (html [_] ["right"])))

(def bottom (reify
              Function
              (invoke [_ element value]
                (assert (instance? Length value))
                (add-style element "left" value))

              PageElement
              (html [_] ["bottom"])))

(def Auto (enum auto))

(def MarginValue (comp Auto
                       Length
                       Global
                       String))

(defn margin
  ([element value]
   (assert (instance? MarginValue value))
   (add-style element "margin" value))
  ([element vert horiz]
   (assert (instance? MarginValue vert))
   (assert (instance? MarginValue horiz))
   (add-style element "margin" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? MarginValue top))
   (assert (instance? MarginValue horiz))
   (assert (instance? MarginValue bottom))
   (add-style element "margin" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? MarginValue top))
   (assert (instance? MarginValue right))
   (assert (instance? MarginValue bottom))
   (assert (instance? MarginValue left))
   (add-style element "margin" [top right bottom left])))

(defn margin-top
  ([element value]
   (assert (instance? MarginValue value))
   (add-style element "margin-top" value)))

(defn margin-bottom
  ([element value]
   (assert (instance? MarginValue value))
   (add-style element "margin-bottom" value)))

(defn margin-left
  ([element value]
   (assert (instance? MarginValue value))
   (add-style element "margin-left" value)))

(defn margin-right
  ([element value]
   (assert (instance? MarginValue value))
   (add-style element "margin-right" value)))


(defn padding
  ([element value]
   (assert (instance? Length value))
   (add-style element "padding" value))
  ([element vert horiz]
   (assert (instance? Length vert))
   (assert (instance? Length horiz))
   (add-style element "padding" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? Length top))
   (assert (instance? Length horiz))
   (assert (instance? Length bottom))
   (add-style element "padding" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? Length top))
   (assert (instance? Length right))
   (assert (instance? Length bottom))
   (assert (instance? Length left))
   (add-style element "padding" [top right bottom left])))

(defn padding-top [element value]
  (assert (instance? Length value))
  (add-style element "padding-top" value))

(defn padding-bottom [element value]
  (assert (instance? Length value))
  (add-style element "padding-bottom" value))

(defn padding-left [element value]
  (assert (instance? Length value))
  (add-style element "padding-left" value))

(defn padding-right [element value]
  (assert (instance? Length value))
  (add-style element "padding-right" value))

(defn line-height [element value]
  (assert (instance? Length value))
  (add-style element "line-height" value))

(defn z-index [element value]
  (assert (instance? Integer value))
  (add-style element "z-index" value))

(defn box-shadow [element value]
  (assert (instance? String value))
  (add-style element "box-shadow" value))

(def DecorationValue (enum none))

(defn text-decoration
  ([element value]
   (assert (instance? DecorationValue value))
   (add-style element "text-decoration" value)))

(defn line-decoration
  ([element value]
   (assert (instance? DecorationValue value))
   (add-style element "line-decoration" value)))

(defn letter-spacing
  ([element value]
   (assert (instance? Length value))
   (add-style element "letter-spacing" value)))

(defn font-family
  ([element value]
   (assert (instance? String value))
   (add-style element "font-family" value)))

(defn font-face
  ([element value]
   (assert (instance? String value))
   (add-style element "font-face" value)))

(defn font-size
  ([element value]
   (assert (instance? Length value))
   (add-style element "font-size" value)))

(defn font-weight [element value]
  (assert (instance? Integer value))
  (add-style element "font-weight" value))


(def PositioningValue (enum fixed relative))

(defn position [element value]
  (assert (instance? PositioningValue value))
  (add-style element "position" value))

(def BackgroundAttachmentValue (enum fixed scroll))

(defn background-attachment [element value]
  (assert (instance? BackgroundAttachmentValue value))
  (add-style element "background-attachment" value))

(defn background-fixed [element]
  (background-attachment element fixed))

(def Cover (enum cover))

(def BackgroundLength (comp Cover Length))

(defn background-size [element value]
  (assert (instance? BackgroundLength value))
  (add-style element "background-size" value))

(defn background-cover [element]
  (background-size element cover))

(defn background-image [element img-url]
  (add-style element "background-image" (str "url(" img-url ")")))

(defn background-color [element value]
  (assert (instance? ColorValue value))
  (add-style element "background-color" value))


(def OverflowValue (enum scroll))

(defn overflow [element value]
  (assert (instance? Overflowvalue value))
  (add-style element "overflow" value))


(def BoxSizingValue (enum initial
                          inherit
                          content-box
                          border-box))

(defn box-sizing [element value]
  (assert (instance? BoxSizingValue value))
  (add-style element "box-sizing" value))

(def PositionValue (enum top bottom left right center))

(defn background-position
  ([element value]
   (assert (instance? PositionValue value))
   (add-style element "background-position" value))
  ([element x-pos y-pos]
   (assert (instance? PositionValue x-pos))
   (assert (instance? PositionValue y-pos))
   (add-style element "background-position" [x-pos y-pos])))

(defn width [element value]
  (assert (instance? Length value))
  (add-style element "width" value))

(defn height [element value]
  (assert (instance? Length value))
  (add-style element "height" value))

(defn color [element value]
  (assert (instance? ColorValue value))
  (add-style element "color" value))

(def DisplayValue (enum flex block list-item none))

(defn display [element value]
  (assert (instance? DisplayValue value))
  (add-style element "display" value))

(defn flex-row [element]
  (-> element
      (display flex)
      (add-style "flex-direction" row)))

(defn flex-column [element]
  (-> element
      (display flex)
      (add-style "flex-direction" column)))

(defn flex-wrap [element]
  (add-style element "flex-wrap" "wrap"))

(defn flex-no-wrap [element]
  (add-style element "flex-wrap" "no-wrap"))

(def Justification (enum center
                         flex-end
                         flex-begin
                         space-between))

(defn justify-content [element value]
  (assert (instance? Justification value))
  (add-style element "justify-content" value))

(defn text-align [element value]
  (assert (instance? Justification value))
  (add-style element "text-align" value))

(defn align-items [element value]
  (assert (instance? Justification value))
  (add-style element "align-items" value))

(defn max-width [element value]
  (assert (instance? Length value))
  (add-style element "max-width" value))

(defn min-width [element value]
  (assert (instance? Length value))
  (add-style element "min-width" value))

(defn max-height [element value]
  (assert (instance? Length value))
  (add-style element "max-height" value))

(defn min-height [element value]
  (assert (instance? Length value))
  (add-style element "min-height" value))

(def BorderStyleValue (enum solid hidden dotted dashed double groove ridge inset outset))

(defn border-color [element value]
  (assert (instance? Color value))
  (add-style element "border-color" value))

(defn border-style [element value]
  (assert (instance? BorderStyleValue value))
  (add-style element "border-style" value))

(defn border-width
  ([element value]
   (assert (instance? Length value))
   (add-style element "border-width" value))
  ([element vert horiz]
   (assert (instance? Length vert))
   (assert (instance? Length horiz))
   (add-style element "border-width" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? Length top))
   (assert (instance? Length horiz))
   (assert (instance? Length bottom))
   (add-style element "border-width" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? Length top))
   (assert (instance? Length right))
   (assert (instance? Length bottom))
   (assert (instance? Length left))
   (add-style element "border-width" [top right bottom left])))

(defn border-radius [element value]
  (assert (instance? Length value))
  (add-style element "border-radius" value))


(def ListStyleTypeValue (enum none
                              disc
                              circle
                              square
                              decimal
                              lower-roman
                              upper-roman
                              lower-alpha
                              lower-latin
                              upper-alpha
                              upper-latin))

(defn list-style [element type]
  (assert (instance? ListStyleTypeValue type))
  (add-style element "list-style" type))

(def ListStylePosValue (enum inside
                             outside))

(defn list-style-position [element type]
  (assert (instance? ListStylePosValue type))
  (add-style element "list-style" type))


(def head (tag "head"))
(def body (tag "body"))
(def script (tag "script"))
(def a (tag "a"))
(def div (tag "div"))
(def p (tag "p"))
(def span (tag "span"))
(def article (tag "article"))
(def aside (tag "aside"))
(def details (tag "details"))
(def footer (tag "footer"))
(def header (tag "header"))
(def hgroup (tag "hgroup"))
(def menu (tag "menu"))
(def nav (tag "nav"))
(def section (tag "section"))
(def ol (tag "ol"))
(def ul (tag "ul"))
(def li (tag "li"))
(def link (tag "link"))
(def title (tag "title"))
(def meta (tag "meta"))
(def img (tag "img"))
(def h1 (tag "h1"))
(def h2 (tag "h2"))
(def h3 (tag "h3"))
(def h4 (tag "h4"))
(def h5 (tag "h5"))
(def h6 (tag "h6"))

(extend-type String
  Stylings
  (add-class [s class]
    (add-class (span s) class))

  (add-style [s attr-name value]
    (add-style (span s) attr-name value)))

(deftype HTMLPage [head body]
  PageElement
  (html [_]
    ["<!DOCTYPE html>\n"
     "<html>\n"
     (html head)
     (html body)
     "</html>"]))

(defn node-types-css [& type-classes]
  (reify
    PageElement
    (html [_]
      ["\n<style type=\"text/css\">\n"
       (map type-classes html)
       "</style>"])))

(deftype Any [styling])

(defn any []
  (Any []))

(deftype All [styling])

(def all
  (All []))

(deftype Not [styling])

(defn not []
  (Not []))

(deftype MediaQuery [styling classes]
  (assert (instance? Styling styling))

  PageElement
  (html [_]
    ["\n@media ("
     (-> styling
         .styles
         (reduce [] (fn [v styling]
                      (conj v (html styling))))
         (interpose "\n")
         vec)
     ") {"
     (-> classes
         (map (fn [class]
                  ["." (html class)]))
         (interpose "\n")
         vec)
     "}"]))

(defn media [& classes]
  (MediaQuery empty-style classes))

(defn classes-css [contents]
  (reify
    PageElement
    (html [_]
      ["\n<style type=\"text/css\">\n"
       (-> contents
           (css {})
           vals
           vec
           (map (fn [class]
                  (assert (instance? Class class))
                  (either (empty? (.styles (.styling class)))
                          ["." (html class)]))))
       "</style>"])))
