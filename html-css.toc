
(add-ns t (module "tag.toc"))
(add-ns d (module "document.toc"))

(def MarginValue (comp Auto
                       Length
                       Global
                       String))

(defn margin
  ([element value]
   (assert (instance? MarginValue value))
   (t/add-style element "margin" value))
  ([element vert horiz]
   (assert (instance? MarginValue vert))
   (assert (instance? MarginValue horiz))
   (t/add-style element "margin" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? MarginValue top))
   (assert (instance? MarginValue horiz))
   (assert (instance? MarginValue bottom))
   (t/add-style element "margin" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? MarginValue top))
   (assert (instance? MarginValue right))
   (assert (instance? MarginValue bottom))
   (assert (instance? MarginValue left))
   (t/add-style element "margin" [top right bottom left])))

(defn margin-top
  ([element value]
   (assert (instance? MarginValue value))
   (t/add-style element "margin-top" value)))

(defn margin-bottom
  ([element value]
   (assert (instance? MarginValue value))
   (t/add-style element "margin-bottom" value)))

(defn margin-left
  ([element value]
   (assert (instance? MarginValue value))
   (t/add-style element "margin-left" value)))

(defn margin-right
  ([element value]
   (assert (instance? MarginValue value))
   (t/add-style element "margin-right" value)))


(defn padding
  ([element value]
   (assert (instance? Length value))
   (t/add-style element "padding" value))
  ([element vert horiz]
   (assert (instance? Length vert))
   (assert (instance? Length horiz))
   (t/add-style element "padding" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? Length top))
   (assert (instance? Length horiz))
   (assert (instance? Length bottom))
   (t/add-style element "padding" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? Length top))
   (assert (instance? Length right))
   (assert (instance? Length bottom))
   (assert (instance? Length left))
   (t/add-style element "padding" [top right bottom left])))

(defn padding-top [element value]
  (assert (instance? Length value))
  (t/add-style element "padding-top" value))

(defn padding-bottom [element value]
  (assert (instance? Length value))
  (t/add-style element "padding-bottom" value))

(defn padding-left [element value]
  (assert (instance? Length value))
  (t/add-style element "padding-left" value))

(defn padding-right [element value]
  (assert (instance? Length value))
  (t/add-style element "padding-right" value))

(defn line-height [element value]
  (assert (instance? Length value))
  (t/add-style element "line-height" value))

(defn z-index [element value]
  (assert (instance? Integer value))
  (t/add-style element "z-index" value))

(defn box-shadow [element value]
  (assert (instance? String value))
  (t/add-style element "box-shadow" value))

(def DecorationValue (enum none))

(defn text-decoration
  ([element value]
   (assert (instance? DecorationValue value))
   (t/add-style element "text-decoration" value)))

(defn line-decoration
  ([element value]
   (assert (instance? DecorationValue value))
   (t/add-style element "line-decoration" value)))

(defn letter-spacing
  ([element value]
   (assert (instance? Length value))
   (t/add-style element "letter-spacing" value)))

(defn font-family
  ([element value]
   (assert (instance? String value))
   (t/add-style element "font-family" value)))

(defn font-face
  ([element value]
   (assert (instance? String value))
   (t/add-style element "font-face" value)))

(defn font-size
  ([element value]
   (assert (instance? Length value))
   (t/add-style element "font-size" value)))

(def Bold (enum bold))

(def WeightValue (comp Integer
                       Bold))

(defn font-weight [element value]
  (assert (instance? WeightValue value))
  (t/add-style element "font-weight" value))


(def PositioningValue (enum fixed relative))

(defn position [element value]
  (assert (instance? PositioningValue value))
  (t/add-style element "position" value))

(def BackgroundAttachmentValue (enum fixed scroll))

(defn background-attachment [element value]
  (assert (instance? BackgroundAttachmentValue value))
  (t/add-style element "background-attachment" value))

(defn background-fixed [element]
  (background-attachment element fixed))

(def Cover (enum cover))

(def BackgroundLength (comp Cover Length))

(defn background-size [element value]
  (assert (instance? BackgroundLength value))
  (t/add-style element "background-size" value))

(defn background-cover [element]
  (background-size element cover))

(defn background-image [element img-url]
  (t/add-style element "background-image" (str "url(" img-url ")")))

(defn background-color [element value]
  (assert (instance? ColorValue value))
  (t/add-style element "background-color" value))


(def OverflowValue (enum scroll))

(defn overflow [element value]
  (assert (instance? Overflowvalue value))
  (t/add-style element "overflow" value))


(def BoxSizingValue (enum initial
                          inherit
                          content-box
                          border-box))

(defn box-sizing [element value]
  (assert (instance? BoxSizingValue value))
  (t/add-style element "box-sizing" value))

(def PositionValue (enum top bottom left right center))

(defn background-position
  ([element value]
   (assert (instance? PositionValue value))
   (t/add-style element "background-position" value))
  ([element x-pos y-pos]
   (assert (instance? PositionValue x-pos))
   (assert (instance? PositionValue y-pos))
   (t/add-style element "background-position" [x-pos y-pos])))

(defn width [element value]
  (assert (instance? Length value))
  (t/add-style element "width" value))

(defn height [element value]
  (assert (instance? Length value))
  (t/add-style element "height" value))

(defn color [element value]
  (assert (instance? ColorValue value))
  (t/add-style element "color" value))

(def DisplayValue (enum flex block list-item none))

(defn float [element value]
  (assert (instance? PositionValue value))
  (t/add-style element "float" value))

(defn display [element value]
  (assert (instance? DisplayValue value))
  (t/add-style element "display" value))

(defn flex-row [element]
  (-> element
      (display flex)
      (t/add-style "flex-direction" row)))

(defn flex-column [element]
  (-> element
      (display flex)
      (t/add-style "flex-direction" column)))

(defn flex-wrap [element]
  (t/add-style element "flex-wrap" "wrap"))

(defn flex-no-wrap [element]
  (t/add-style element "flex-wrap" "no-wrap"))

(def Justification (enum center
                         flex-end
                         flex-begin
                         space-between))

(defn justify-content [element value]
  (assert (instance? Justification value))
  (t/add-style element "justify-content" value))

(defn text-align [element value]
  (assert (instance? Justification value))
  (t/add-style element "text-align" value))

(defn align-items [element value]
  (assert (instance? Justification value))
  (t/add-style element "align-items" value))

(defn max-width [element value]
  (assert (instance? Length value))
  (t/add-style element "max-width" value))

(defn min-width [element value]
  (assert (instance? Length value))
  (t/add-style element "min-width" value))

(defn max-height [element value]
  (assert (instance? Length value))
  (t/add-style element "max-height" value))

(defn min-height [element value]
  (assert (instance? Length value))
  (t/add-style element "min-height" value))

(def BorderStyleValue (enum solid hidden dotted dashed double groove ridge inset outset))

(defn border-color [element value]
  (assert (instance? Color value))
  (t/add-style element "border-color" value))

(defn border-style [element value]
  (assert (instance? BorderStyleValue value))
  (t/add-style element "border-style" value))

(defn border-width
  ([element value]
   (assert (instance? Length value))
   (t/add-style element "border-width" value))
  ([element vert horiz]
   (assert (instance? Length vert))
   (assert (instance? Length horiz))
   (t/add-style element "border-width" [vert horiz]))
  ([element top horiz bottom]
   (assert (instance? Length top))
   (assert (instance? Length horiz))
   (assert (instance? Length bottom))
   (t/add-style element "border-width" [top horiz bottom]))
  ([element top right bottom left]
   (assert (instance? Length top))
   (assert (instance? Length right))
   (assert (instance? Length bottom))
   (assert (instance? Length left))
   (t/add-style element "border-width" [top right bottom left])))

(defn border-radius [element value]
  (assert (instance? Length value))
  (t/add-style element "border-radius" value))


(def ListStyleTypeValue (enum none
                              disc
                              circle
                              square
                              decimal
                              lower-roman
                              upper-roman
                              lower-alpha
                              lower-latin
                              upper-alpha
                              upper-latin))

(defn list-style [element type]
  (assert (instance? ListStyleTypeValue type))
  (t/add-style element "list-style" type))

(def ListStylePosValue (enum inside
                             outside))

(defn list-style-position [element type]
  (assert (instance? ListStylePosValue type))
  (t/add-style element "list-style" type))


(def head (t/tag "head"))
(def body (t/tag "body"))
(def style (t/tag "style"))
(def script (t/tag "script"))
(def a (t/tag "a"))
(def div (t/tag "div"))
(def p (t/tag "p"))
(def span (t/tag "span"))
(def article (t/tag "article"))
(def aside (t/tag "aside"))
(def details (t/tag "details"))
(def footer (t/tag "footer"))
(def header (t/tag "header"))
(def hgroup (t/tag "hgroup"))
(def menu (t/tag "menu"))
(def nav (t/tag "nav"))
(def section (t/tag "section"))
(def ol (t/tag "ol"))
(def ul (t/tag "ul"))
(def li (t/tag "li"))
(def link (t/tag "link"))
(def title (t/tag "title"))
(def meta (t/tag "meta"))
(def img (t/tag "img"))
(def h1 (t/tag "h1"))
(def h2 (t/tag "h2"))
(def h3 (t/tag "h3"))
(def h4 (t/tag "h4"))
(def h5 (t/tag "h5"))
(def h6 (t/tag "h6"))
(def button (t/tag "button"))

(extend-type String
  t/Stylings
  (t/add-class [s class]
    (t/add-class (span s) class))

  (t/add-style [s attr-name value]
    (t/add-style (span s) attr-name value)))

(deftype HTMLPage [head body]
  d/DocElement
  (d/html [_]
    ["<!DOCTYPE html>\n"
     "<html>\n"
     (d/html head)
     (d/html body)
     "</html>"]))

(defn node-types-css [& type-classes]
  (reify
    d/DocElement
    (d/html [_]
      ["\n<style type=\"text/css\">\n"
       (map type-classes d/html)
       "</style>"])))

(deftype Any [styling])

(defn any []
  (Any []))

(deftype All [styling])

(def all
  (All []))

(deftype Not [styling])

(defn not []
  (Not []))

(deftype MediaQuery [styling classes]
  (assert (instance? t/Styling styling))

  d/DocElement
  (d/html [_]
    ["\n@media ("
     (-> styling
         .styles
         (reduce [] (fn [v styling]
                      (conj v (d/html styling))))
         (interpose "\n")
         vec)
     ") {"
     (-> classes
         (map (fn [class]
                  ["." (d/html class)]))
         (interpose "\n")
         vec)
     "}"]))

(defn media [& classes]
  (MediaQuery t/empty-style classes))

(defn classes-css [contents]
  (reify
    d/DocElement
    (d/html [_]
      ["\n<style type=\"text/css\">\n"
       (-> contents
           (d/css {})
           vals
           vec
           (map (fn [class]
                  (assert (instance? Class class))
                  (either (empty? (.styles (.styling class)))
                          ["." (d/html class)]))))
       "</style>"])))
